{"Asset":[{"_id":"source/images/firstdoor.jpg","path":"images/firstdoor.jpg","modified":false},{"_id":"source/images/green_glass_terrariums.jpg","path":"images/green_glass_terrariums.jpg","modified":false},{"_id":"source/images/julangart.jpg","path":"images/julangart.jpg","modified":false},{"_id":"source/images/mamre.jpg","path":"images/mamre.jpg","modified":false},{"_id":"source/images/ptw.jpg","path":"images/ptw.jpg","modified":false},{"_id":"source/downloads/code/test.js","path":"downloads/code/test.js","modified":false},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes/tyrant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/tyrant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/tyrant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/tyrant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/tyrant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/tyrant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/tyrant/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/tyrant/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/tyrant/source/js/gallery.js","path":"js/gallery.js","modified":false},{"_id":"themes/tyrant/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":false},{"_id":"themes/tyrant/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/tyrant/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":false},{"_id":"themes/tyrant/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":false},{"_id":"themes/tyrant/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":false},{"_id":"themes/tyrant/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1406165293000},{"_id":"scaffolds/page.md","mtime":1406165293000},{"_id":"scaffolds/photo.md","mtime":1406165293000},{"_id":"scaffolds/post.md","mtime":1406165293000},{"_id":"source/Projects2/index.md","mtime":1406165293000},{"_id":"source/_drafts/welcome-to-the-axion5-website!.md","mtime":1406165293000},{"_id":"source/_posts/Meteor,-docs-and-attached-files.md","mtime":1406165293000},{"_id":"source/_posts/about-this-site.md","mtime":1406165293000},{"_id":"source/_posts/my-webstack.md","mtime":1406165293000},{"_id":"source/about/index.md","mtime":1406165293000},{"_id":"source/images/firstdoor.jpg","mtime":1406165293000},{"_id":"source/images/green_glass_terrariums.jpg","mtime":1406165293000},{"_id":"source/images/julangart.jpg","mtime":1406165293000},{"_id":"source/images/mamre.jpg","mtime":1406165293000},{"_id":"source/images/ptw.jpg","mtime":1406165293000},{"_id":"source/projects/index.md","mtime":1406165293000},{"_id":"source/websites/index.md","mtime":1406165293000},{"_id":"source/downloads/code/test.js","mtime":1406165293000},{"_id":"themes/landscape/Gruntfile.js","mtime":1406165293000},{"_id":"themes/landscape/LICENSE","mtime":1406165293000},{"_id":"themes/landscape/README.md","mtime":1406165293000},{"_id":"themes/landscape/_config.yml","mtime":1406165293000},{"_id":"themes/landscape/package.json","mtime":1406165293000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1406165293000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/index.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/category.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/page.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/post.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1406165293000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1406165293000},{"_id":"themes/landscape/source/js/script.js","mtime":1406165293000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/style.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1406165293000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1406165293000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1406165293000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1406165293000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1406165293000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1406165293000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1406165293000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1406165293000},{"_id":"themes/tyrant/LICENSE","mtime":1406171328000},{"_id":"themes/tyrant/README.md","mtime":1406171328000},{"_id":"themes/tyrant/_config.yml","mtime":1406171328000},{"_id":"themes/tyrant/languages/de.yml","mtime":1406171328000},{"_id":"themes/tyrant/languages/default.yml","mtime":1406171328000},{"_id":"themes/tyrant/languages/ru.yml","mtime":1406171328000},{"_id":"themes/tyrant/languages/zh-CN.yml","mtime":1406171328000},{"_id":"themes/tyrant/languages/zh-TW.yml","mtime":1406171328000},{"_id":"themes/tyrant/layout/archive.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/category.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/index.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/layout.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/page.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/post.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/tag.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_widget/category.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_widget/recent_posts.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_widget/search.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_widget/tag.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_widget/tagcloud.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/after_footer.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/archive.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/article.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/comment.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/facebook_comment.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/footer.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/google_analytics.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/head.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/header.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/pagination.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/sidebar.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/post/category.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/post/gallery.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/post/share.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/post/tag.ejs","mtime":1406171328000},{"_id":"themes/tyrant/layout/_partial/post/title.ejs","mtime":1406171328000},{"_id":"themes/tyrant/source/fancybox/blank.gif","mtime":1406171328000},{"_id":"themes/tyrant/source/fancybox/fancybox_loading.gif","mtime":1406171328000},{"_id":"themes/tyrant/source/fancybox/fancybox_loading@2x.gif","mtime":1406171328000},{"_id":"themes/tyrant/source/fancybox/fancybox_overlay.png","mtime":1406171328000},{"_id":"themes/tyrant/source/fancybox/fancybox_sprite.png","mtime":1406171328000},{"_id":"themes/tyrant/source/fancybox/fancybox_sprite@2x.png","mtime":1406171328000},{"_id":"themes/tyrant/source/fancybox/jquery.fancybox.css","mtime":1406171328000},{"_id":"themes/tyrant/source/fancybox/jquery.fancybox.pack.js","mtime":1406171328000},{"_id":"themes/tyrant/source/js/gallery.js","mtime":1406171328000},{"_id":"themes/tyrant/source/js/jquery.imagesloaded.min.js","mtime":1406171328000},{"_id":"themes/tyrant/source/css/style.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/_base/layout.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/_base/utils.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/_base/variable.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/_partial/archive.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/_partial/article.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/_partial/comment.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/_partial/footer.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/_partial/header.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/_partial/index.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/_partial/sidebar.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/_partial/syntax.styl","mtime":1406171328000},{"_id":"themes/tyrant/source/css/font/fontawesome-webfont.eot","mtime":1406171328000},{"_id":"themes/tyrant/source/css/font/fontawesome-webfont.svg","mtime":1406171328000},{"_id":"themes/tyrant/source/css/font/fontawesome-webfont.ttf","mtime":1406171328000},{"_id":"themes/tyrant/source/css/font/fontawesome-webfont.woff","mtime":1406171328000}],"Category":[],"Page":[{"title":"Projects2","date":1401722331000,"comments":false,"content":"<p><br></p>\n<h3 id=\"bb-server\"><a href=\"http://github.com/Michieljoris/bb-server\" target=\"_blank\" rel=\"external\">bb-server</a></h3>\n<p>Starting out as cobbled together one page node server, it grew over the past<br>year to a more featured server. Totally rewritten and refactored a couple of<br>times, it now can function as a https server, and a socket server as well.<br>Customized logging, caching in memory and disk, and on the fly transpiling,<br>minifying and compressing of assets and more have turned it into a more<br>production ready server. </p>\n<p>At the same time it still starts up with a single word command, all the features<br>are then disabled by default. A lot of features can still be enabled on that<br>same command line, but for an easier and more complete configuration a config<br>file can be used. No plugin system, since it is easier to just write it into the<br>server than designing one, except for the transpilers, compressors etc, more can<br>easily be added by using little api.</p>\n<p>Mostly a learning experience for me, however I do use it for some of my sites. </p>\n<p><br></p>\n<h3 id=\"html-builder\"><a href=\"https://github.com/Michieljoris/html-builder\" target=\"_blank\" rel=\"external\">html-builder</a></h3>\n<p>A simple html build system using templates of sort. Using<br><a href=\"https://github.com/flatiron/plates\" target=\"_blank\" rel=\"external\">flatiron plates</a> to fish out markers from<br>the html soup and a javascript object to knit it all together again. But again,<br>because I wrote it myself I can adapt it easily to whatever I need it to be, and<br>you learn a lot while writing and adapting it.<br><a href=\"https://github.com/Michieljoris/dbeditor\" target=\"_blank\" rel=\"external\">dbeditor</a></p>\n<p>Dbeditor allows you to connect to your dropbox, browse the contents and then<br>edit text files using a markdown or wysiwyg editor.</p>\n<p><br></p>\n<h3 id=\"cachejs\"><a href=\"https://github.com/Michieljoris/cachejs\" target=\"_blank\" rel=\"external\">cachejs</a></h3>\n<p>Implementation of both LRU and ARC cache. Used in bb-server. It includes a<br>heavily commented arc_cache.js file. The Adaptive Replacement Cache algorithm is<br>supposed be efficient. I think I understand how it works, but whether I could<br>have written it I don’t know. It seems clever.</p>\n<p><br></p>\n<h3 id=\"quilt\"><a href=\"https://github.com/Michieljoris/quilt\" target=\"_blank\" rel=\"external\">quilt</a></h3>\n<p>A word play on futon, the database manager that comes with CouchDB. I thought it<br>was not as useful as it could be, so I wrote my own version. It allows you to<br>edit the various design docs in the manager. It also simplifies editing and<br>enabling replications, and a number of other enhancements. As usual I start out<br>with big plans for an app, and implement the bulk of it, but there definitly<br>still things that could be worked on and expanded on. </p>\n<p>The other half of this app is a wizard to make it very easy for people to<br>install and cors enable a CouchDB database for use with an other web app,<br>roster. It then initializes the database depending on who they are and what<br>their preferences are, setting up the right replications and permissions.</p>\n<p><br></p>\n<h3 id=\"validate_doc_update\"><a href=\"https://github.com/Michieljoris/validate_doc_update\" target=\"_blank\" rel=\"external\">validate_doc_update</a></h3>\n<p>Used for the roster web app to easily manage read -and- write permissions. I<br>didn’t want to write a different validate_doc_update document for every use<br>case, so I made a generic one that can be controlled via a little dsl, embedded<br>in the read permissions. See the github repo for more info.</p>\n<p><br></p>\n<h3 id=\"roster\"><a href=\"https://github.com/Michieljoris/roster\" target=\"_blank\" rel=\"external\">roster</a></h3>\n<p>I’ve been doing shift work to make ends meet for a number of years. I got tired<br>of filling in time sheets, I never seemed to do that without at least one<br>mistake or correction, so I made a little Excel worksheet for my own use. This<br>time sheet was picked up by other staff and management and it had to be adapted<br>to other work places. In the end Excel worksheet just got to complicated so I<br>made this web app. </p>\n<p>It is built using <a href=\"https://smartclient.com/\" target=\"_blank\" rel=\"external\">Smartclient</a> for the interface and<br>is served by CouchDB where the data is stored as a couchapp. At the moment it<br>sits on a Linode server. Users are authenticated and can be assigned roles. The<br>user database is synced between databases. I wrote a long spiel about the<br>security aspects of the app <a href=\"http://roster_help.axion5.net/\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p>The app can be run offline because it uses application cache. The app itself can<br>be synced to a local database, and so can the data the app runs against. The app<br>can also be run against an in-browser database using an implemention of a<br>browser version of CouchDB: <a href=\"http://pouchdb.com/\" target=\"_blank\" rel=\"external\">pouchdb</a>. </p>\n<p>I tried to keep the UI as simple as possible, no menus, only 5 little<br>buttons. The user can build up their own UI to some extent by dragging and<br>dropping, this gets persisted accross sessions, and even accross databases. </p>\n<p>The thing is designed really to be backend agnostic and extendable by plugin<br>views, even plugin types. But at the moment it works against CouchDB and has only<br>the following types (and their editors): shift, location, person, settings,<br>user and the following views of data: table, calendar and time sheet. The design<br>of the app is such that it is quite easy to add more views of the data, like a<br>graph for instance. </p>\n<p>From the repo’s README:</p>\n<blockquote>\n\n<p>To help people set up a CouchDB instance I wrote quilt, it configures and sets up all the necessary replications for them. It is also a generic CouchDB manager a la futon.</p>\n<p>The idea is to have a decentralized but hierarchical group of CouchDB instances against which the app can work, see my blurb on security.</p>\n<p>In the end staff can view their upcoming shifts online, bosses can manipulate them, and management can have an overview and collate all the data easily.</p>\n<p>SmartClient is a bit cumbersome and it would be nice to rewrite the app using no<br>frameworks. Especially the calendar gets a bit sluggish.</p>\n</blockquote>\n\n\n<p>The app itself is used by a few people at the organisation I wrote it for. I had<br>a meeting/presentation with management, but things can move a bit slow at these<br>organizations. Or maybe I am just not the best salesman..</p>\n<p><br></p>\n<h3 id=\"bootstrapjs\"><a href=\"https://github.com/Michieljoris/bootstrapjs\" target=\"_blank\" rel=\"external\">bootstrapjs</a></h3>\n<p>To keep the roster app modular I wrote my version of requirejs. Not AMD<br>compatible, but same idea and functionality. See the repo for more info. I had<br>ideas of having it concatenate all the files in the right order for production<br>use. However browserify and the use of transpiled languages (clojure!) make it<br>all this a bit obsolete. Let alone that javascript itself will have modules in<br>es6 it seems. But it was fun to write, basically doing a depth first search to<br>resolve the dependencies, with detection of cyclic dependencies.</p>\n<p><br><br>More on <a href=\"http://github.com/Michieljoris\" target=\"_blank\" rel=\"external\">github</a></p>\n","source":"Projects2/index.md","raw":"title: Projects2\ndate: 2014-06-03 01:18:51\ncomments: false\n\n---\n\n\n\n<br/>\n###[bb-server](http://github.com/Michieljoris/bb-server)\n\nStarting out as cobbled together one page node server, it grew over the past\nyear to a more featured server. Totally rewritten and refactored a couple of\ntimes, it now can function as a https server, and a socket server as well.\nCustomized logging, caching in memory and disk, and on the fly transpiling,\nminifying and compressing of assets and more have turned it into a more\nproduction ready server. \n\nAt the same time it still starts up with a single word command, all the features\nare then disabled by default. A lot of features can still be enabled on that\nsame command line, but for an easier and more complete configuration a config\nfile can be used. No plugin system, since it is easier to just write it into the\nserver than designing one, except for the transpilers, compressors etc, more can\neasily be added by using little api.\n\nMostly a learning experience for me, however I do use it for some of my sites. \n\n<br/>\n\n\n###[html-builder](https://github.com/Michieljoris/html-builder)\n\nA simple html build system using templates of sort. Using\n[flatiron plates](https://github.com/flatiron/plates) to fish out markers from\nthe html soup and a javascript object to knit it all together again. But again,\nbecause I wrote it myself I can adapt it easily to whatever I need it to be, and\nyou learn a lot while writing and adapting it. \n[dbeditor](https://github.com/Michieljoris/dbeditor)\n\nDbeditor allows you to connect to your dropbox, browse the contents and then\nedit text files using a markdown or wysiwyg editor.\n\n<br/>\n\n###[cachejs](https://github.com/Michieljoris/cachejs)\n\nImplementation of both LRU and ARC cache. Used in bb-server. It includes a\nheavily commented arc_cache.js file. The Adaptive Replacement Cache algorithm is\nsupposed be efficient. I think I understand how it works, but whether I could\nhave written it I don't know. It seems clever.\n\n<br/>\n\n###[quilt](https://github.com/Michieljoris/quilt)\n\nA word play on futon, the database manager that comes with CouchDB. I thought it\nwas not as useful as it could be, so I wrote my own version. It allows you to\nedit the various design docs in the manager. It also simplifies editing and\nenabling replications, and a number of other enhancements. As usual I start out\nwith big plans for an app, and implement the bulk of it, but there definitly\nstill things that could be worked on and expanded on. \n\nThe other half of this app is a wizard to make it very easy for people to\ninstall and cors enable a CouchDB database for use with an other web app,\nroster. It then initializes the database depending on who they are and what\ntheir preferences are, setting up the right replications and permissions.\n\n<br/>\n\n###[validate_doc_update](https://github.com/Michieljoris/validate_doc_update)\n\nUsed for the roster web app to easily manage read -and- write permissions. I\ndidn't want to write a different validate_doc_update document for every use\ncase, so I made a generic one that can be controlled via a little dsl, embedded\nin the read permissions. See the github repo for more info.\n\n<br/>\n\n###[roster](https://github.com/Michieljoris/roster)\n\nI've been doing shift work to make ends meet for a number of years. I got tired\nof filling in time sheets, I never seemed to do that without at least one\nmistake or correction, so I made a little Excel worksheet for my own use. This\ntime sheet was picked up by other staff and management and it had to be adapted\nto other work places. In the end Excel worksheet just got to complicated so I\nmade this web app. \n\nIt is built using [Smartclient](https://smartclient.com/) for the interface and\nis served by CouchDB where the data is stored as a couchapp. At the moment it\nsits on a Linode server. Users are authenticated and can be assigned roles. The\nuser database is synced between databases. I wrote a long spiel about the\nsecurity aspects of the app [here](http://roster_help.axion5.net/).\n\nThe app can be run offline because it uses application cache. The app itself can\nbe synced to a local database, and so can the data the app runs against. The app\ncan also be run against an in-browser database using an implemention of a\nbrowser version of CouchDB: [pouchdb](http://pouchdb.com/). \n\nI tried to keep the UI as simple as possible, no menus, only 5 little\nbuttons. The user can build up their own UI to some extent by dragging and\ndropping, this gets persisted accross sessions, and even accross databases. \n\nThe thing is designed really to be backend agnostic and extendable by plugin\nviews, even plugin types. But at the moment it works against CouchDB and has only\nthe following types (and their editors): shift, location, person, settings,\nuser and the following views of data: table, calendar and time sheet. The design\nof the app is such that it is quite easy to add more views of the data, like a\ngraph for instance. \n\nFrom the repo's README:\n\n{% blockquote %}\nTo help people set up a CouchDB instance I wrote quilt, it configures and sets up all the necessary replications for them. It is also a generic CouchDB manager a la futon.\n\nThe idea is to have a decentralized but hierarchical group of CouchDB instances against which the app can work, see my blurb on security.\n\nIn the end staff can view their upcoming shifts online, bosses can manipulate them, and management can have an overview and collate all the data easily.\n\nSmartClient is a bit cumbersome and it would be nice to rewrite the app using no\nframeworks. Especially the calendar gets a bit sluggish.\n{% endblockquote %}\n\nThe app itself is used by a few people at the organisation I wrote it for. I had\na meeting/presentation with management, but things can move a bit slow at these\norganizations. Or maybe I am just not the best salesman..\n\n<br/>\n\n###[bootstrapjs](https://github.com/Michieljoris/bootstrapjs)\n\nTo keep the roster app modular I wrote my version of requirejs. Not AMD\ncompatible, but same idea and functionality. See the repo for more info. I had\nideas of having it concatenate all the files in the right order for production\nuse. However browserify and the use of transpiled languages (clojure!) make it\nall this a bit obsolete. Let alone that javascript itself will have modules in\nes6 it seems. But it was fun to write, basically doing a depth first search to\nresolve the dependencies, with detection of cyclic dependencies.\n\n<br/>\nMore on [github](http://github.com/Michieljoris)\n\n","updated":1406165293000,"path":"Projects2/index.html","excerpt":"","_id":"xopa4zbxegu30hk4","layout":"page"},{"title":"about","date":1391577547000,"comments":false,"content":"<p><br><br>Living in Brisbane with my wife and two daughters. </p>\n<p>Dutch by birth. </p>\n<p>Classical pianist. </p>\n<p>Piano teacher since 10 years or so. </p>\n<p>Loving the weather and space here in Australia but missing the culture of where<br>I come from.</p>\n<p>Enjoy speed skating and wind surfing as sports, sailing as a hobby. </p>\n<p>Love creating things on a computer. </p>\n<p>What else is there to say? </p>\n<p>Contact me at <a href=\"mailto:mail@axion5.net\" target=\"_blank\" rel=\"external\">mail@axion5.net</a>.</p>\n","source":"about/index.md","raw":"title: about\ndate: 2014-02-05 15:19:07\ncomments: false\n---\n\n<br/>\nLiving in Brisbane with my wife and two daughters. \n\nDutch by birth. \n\nClassical pianist. \n\nPiano teacher since 10 years or so. \n\nLoving the weather and space here in Australia but missing the culture of where\nI come from.\n\nEnjoy speed skating and wind surfing as sports, sailing as a hobby. \n\nLove creating things on a computer. \n\nWhat else is there to say? \n\n\nContact me at [mail@axion5.net](mailto:mail@axion5.net).\n","updated":1406165293000,"path":"about/index.html","excerpt":"","_id":"f89yyct8h4lxtvh1","layout":"page"},{"title":"Websites","date":1391576779000,"comments":false,"content":"<p><br><br>I am a developer, not a designer, however I try to make a site look as pleasing as possible. My starting point is a template, which I tweak and adapt till it comes accross as some kind of unit, the exception so far has been the greenglass site, which is actually bit more of a one page app then a traditional website.</p>\n<p><a href=\"http://www.julangart.com\" target=\"_blank\" rel=\"external\">www.julangart.com</a></p>\n<img src=\"/images/julangart.jpg\" class=\"right\" title=\"julangart.com\"><br>Built with Drupal and hosted very cheaply at<br><a href=\"http://www.nearlyfreespeech.net\" target=\"_blank\" rel=\"external\">nearlyfreespeech</a>. The end user can build<br>their own galleries and add them to the site. Fully responsive, so mobile ready.<br><br><br><br><br><a href=\"http://www.firstdoor.com.au\" target=\"_blank\" rel=\"external\">www.firstdoor.com.au</a><br><img src=\"/images/firstdoor.jpg\" class=\"right\" title=\"julangart.com\">\n\n<p>Built with angularjs and bootstrap and running off a <a href=\"https://github.com/Michieljoris/bb-server\" target=\"_blank\" rel=\"external\">home spun</a> nodejs server. The site is built out of html fragments put together by my <a href=\"https://github.com/Michieljoris/html-builder\" target=\"_blank\" rel=\"external\">html-builder</a>. Mobile ready. Served from nodejitsu originally, but now from a Linode server. End user is able to edit the main texts by using my <a href=\"http://dbeditor.axion5.net/\" target=\"_blank\" rel=\"external\">dropbox editor</a>, and then visiting the sync page on their site. The site automatically rebuilds itself after. Similarly the end user can edit a list of videos. They get grouped automatically and listed on the resources page. A bit similar to a blogging engine. In fact, using the same mechanism the site can easily be expanded to enable dynamic adding/editing of content, using an online editor. However, that is not implemented yet.<br><br></p>\n<p><a href=\"http://www.greenglass-terrariums.com\" target=\"_blank\" rel=\"external\">www.greenglass-terrariums.com</a></p>\n<img src=\"/images/green_glass_terrariums.jpg\" class=\"right\" title=\"greenglass-terrariums.com\"> \n\n<p>A true one page app using angularjs and nodejs. The idea was to make a site that resembles a gallery as closely as possible. You can make a selection of the kind of terrarium by clicking the select button. The site uses <a href=\"http://isotope.metafizzy.co/\" target=\"_blank\" rel=\"external\">isotope</a> for the auto rearranging images. End user is able to upload images from an ipad to dropbox. By visiting the sync page the server pulls these images from there. The end user is then able to add tags such as price and size to all images. The end user has to log into the site to enable the editing features. The server is again my own <a href=\"https://github.com/Michieljoris/bb-server\" target=\"_blank\" rel=\"external\">bb-server</a>), running on <a href=\"\">AWS</a> at the moment but will migrate to a Linode server.</p>\n<p><br></p>\n<p><a href=\"http://www.mamre.org.au\" target=\"_blank\" rel=\"external\">www.mamre.org.au</a></p>\n<img src=\"/images/mamre.jpg\" class=\"right\" title=\"mamre.org.au\">\n\n<p>Drupal site running on Linode. </p>\n<p><br></p>\n<p><a href=\"http://www.pavetheway.org.au\" target=\"_blank\" rel=\"external\">www.pavetheway.org.au</a></p>\n<img src=\"/images/ptw.jpg\" class=\"right\" title=\"pavetheway.org.au\">\n\n<p>Drupal site running on Linode. </p>\n<p><br></p>\n","source":"websites/index.md","raw":"title: Websites\ndate: 2014-02-05 15:06:19\ncomments: false\n----\n\n<br/>\nI am a developer, not a designer, however I try to make a site look as pleasing as possible. My starting point is a template, which I tweak and adapt till it comes accross as some kind of unit, the exception so far has been the greenglass site, which is actually bit more of a one page app then a traditional website.\n\n[www.julangart.com](http://www.julangart.com)\n{% img right /images/julangart.jpg  julangart.com %}\nBuilt with Drupal and hosted very cheaply at\n[nearlyfreespeech](http://www.nearlyfreespeech.net). The end user can build\ntheir own galleries and add them to the site. Fully responsive, so mobile ready.\n\n<br/>\n\n[www.firstdoor.com.au](http://www.firstdoor.com.au) \n{% img right /images/firstdoor.jpg  julangart.com %}\n\nBuilt with angularjs and bootstrap and running off a [home spun](https://github.com/Michieljoris/bb-server) nodejs server. The site is built out of html fragments put together by my [html-builder](https://github.com/Michieljoris/html-builder). Mobile ready. Served from nodejitsu originally, but now from a Linode server. End user is able to edit the main texts by using my [dropbox editor](http://dbeditor.axion5.net/), and then visiting the sync page on their site. The site automatically rebuilds itself after. Similarly the end user can edit a list of videos. They get grouped automatically and listed on the resources page. A bit similar to a blogging engine. In fact, using the same mechanism the site can easily be expanded to enable dynamic adding/editing of content, using an online editor. However, that is not implemented yet. \n<br/>\n\n\n[www.greenglass-terrariums.com](http://www.greenglass-terrariums.com)\n{% img right /images/green_glass_terrariums.jpg greenglass-terrariums.com %} \n\nA true one page app using angularjs and nodejs. The idea was to make a site that resembles a gallery as closely as possible. You can make a selection of the kind of terrarium by clicking the select button. The site uses [isotope](http://isotope.metafizzy.co/) for the auto rearranging images. End user is able to upload images from an ipad to dropbox. By visiting the sync page the server pulls these images from there. The end user is then able to add tags such as price and size to all images. The end user has to log into the site to enable the editing features. The server is again my own [bb-server](https://github.com/Michieljoris/bb-server)), running on [AWS]() at the moment but will migrate to a Linode server.\n\n<br/>\n\n[www.mamre.org.au](http://www.mamre.org.au)\n{% img right /images/mamre.jpg   mamre.org.au%}\n\nDrupal site running on Linode. \n\n<br/>\n\n[www.pavetheway.org.au](http://www.pavetheway.org.au)\n{% img right /images/ptw.jpg  pavetheway.org.au %}\n\nDrupal site running on Linode. \n\n<br/>\n\n","updated":1406165293000,"path":"websites/index.html","excerpt":"","_id":"x8mv2p9y0odqs0s2","layout":"page"},{"title":"Projects","date":1401722331000,"comments":false,"content":"<p><br></p>\n<h3 id=\"bb-server\"><a href=\"http://github.com/Michieljoris/bb-server\" target=\"_blank\" rel=\"external\">bb-server</a></h3>\n<p>Starting out as cobbled together one page node server, it grew over the past year to a more featured server. Totally rewritten and refactored a couple of times, it now can function as a https server, and a socket server as well. Customized logging, caching in memory and disk, and on the fly transpiling, minifying and compressing of assets and more have turned it into a more production ready server. </p>\n<p>At the same time it still starts up with a single word command, all the features are then disabled by default. A lot of features can still be enabled on that same command line, but for an easier and more complete configuration a config file can be used. No plugin system, since it is easier to just write it into the server than designing one, except for the transpilers, compressors etc, more can easily be added by using little api.</p>\n<p>Mostly a learning experience for me, however I do use it for some of my sites. </p>\n<p><br></p>\n<h3 id=\"html-builder\"><a href=\"https://github.com/Michieljoris/html-builder\" target=\"_blank\" rel=\"external\">html-builder</a></h3>\n<p>A simple html build system using templates of sort. Using <a href=\"https://github.com/flatiron/plates\" target=\"_blank\" rel=\"external\">flatiron plates</a> to fish out markers from the html soup and a javascript object to knit it all together again. But again, because I wrote it myself I can adapt it easily to whatever I need it to be, and you learn a lot while writing and adapting it. <a href=\"https://github.com/Michieljoris/dbeditor\" target=\"_blank\" rel=\"external\">dbeditor</a></p>\n<p>Dbeditor allows you to connect to your dropbox, browse the contents and then edit text files using a markdown or wysiwyg editor.</p>\n<p><br></p>\n<h3 id=\"cachejs\"><a href=\"https://github.com/Michieljoris/cachejs\" target=\"_blank\" rel=\"external\">cachejs</a></h3>\n<p>Implementation of both LRU and ARC cache. Used in bb-server. It includes a heavily commented arc_cache.js file. The Adaptive Replacement Cache algorithm is supposed be efficient. I think I understand how it works, but whether I could have written it I don’t know. It seems clever.<br><br></p>\n<h3 id=\"quilt\"><a href=\"https://github.com/Michieljoris/quilt\" target=\"_blank\" rel=\"external\">quilt</a></h3>\n<p>A word play on futon, the database manager that comes with CouchDB. I thought it was not as useful as it could be, so I wrote my own version. It allows you to edit the various design docs in the manager. It also simplifies editing and enabling replications, and a number of other enhancements. As usual I start out with big plans for an app, and implement the bulk of it, but there definitly still things that could be worked on and expanded on. </p>\n<p>The other half of this app is a wizard to make it very easy for people to install and cors enable a CouchDB database for use with an other web app, roster. It then initializes the database depending on who they are and what their preferences are, setting up the right replications and permissions.</p>\n<p><br></p>\n<h3 id=\"validate_doc_update\"><a href=\"https://github.com/Michieljoris/validate_doc_update\" target=\"_blank\" rel=\"external\">validate_doc_update</a></h3>\n<p>Used for the roster web app to easily manage read -and- write permissions. I didn’t want to write a different validate_doc_update document for every use case, so I made a generic one that can be controlled via a little dsl, embedded in the read permissions. See the github repo for more info.<br><br></p>\n<h3 id=\"roster\"><a href=\"https://github.com/Michieljoris/roster\" target=\"_blank\" rel=\"external\">roster</a></h3>\n<p>I’ve been doing shift work to make ends meet for a number of years. I got tired of filling in time sheets, I never seemed to do that without at least one mistake or correction, so I made a little Excel worksheet for my own use. This time sheet was picked up by other staff and management and it had to be adapted to other work places. In the end Excel worksheet just got to complicated so I made this web app. </p>\n<p>It is built using <a href=\"https://smartclient.com/\" target=\"_blank\" rel=\"external\">Smartclient</a> for the interface and is served by CouchDB where the data is stored as a couchapp. At the moment it sits on a Linode server. Users are authenticated and can be assigned roles. The user database is synced between databases. I wrote a long spiel about the security aspects of the app <a href=\"http://roster_help.axion5.net/\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p>The app can be run offline because it uses application cache. The app itself can be synced to a local database, and so can the data the app runs against. The app can also be run against an in-browser database using an implemention of a browser version of CouchDB: <a href=\"http://pouchdb.com/\" target=\"_blank\" rel=\"external\">pouchdb</a>. </p>\n<p>I tried to keep the UI as simple as possible, no menus, only 5 little buttons. The user can build up their own UI to some extent by dragging and dropping, this gets persisted accross sessions, and even accross databases. </p>\n<p>The thing is designed really to be backend agnostic and extendable by plugin views, even plugin types. But at the moment it works against CouchDB and has only the following types (and their editors): shift, location, person, settings, user and the following views of data: table, calendar and time sheet. The design of the app is such that it is quite easy to add more views of the data, like a graph for instance. </p>\n<p>From the repo’s README:</p>\n<blockquote>\n\n<p>To help people set up a CouchDB instance I wrote quilt, it configures and sets up all the necessary replications for them. It is also a generic CouchDB manager a la futon.</p>\n<p>The idea is to have a decentralized but hierarchical group of CouchDB instances against which the app can work, see my blurb on security.</p>\n<p>In the end staff can view their upcoming shifts online, bosses can manipulate them, and management can have an overview and collate all the data easily.</p>\n<p>SmartClient is a bit cumbersome and it would be nice to rewrite the app using no<br>frameworks. Especially the calendar gets a bit sluggish.</p>\n</blockquote>\n\n\n<p>The app itself is used by a few people at the organisation I wrote it for. I had<br>a meeting/presentation with management, but things can move a bit slow at these<br>organizations. Or maybe I am just not the best salesman..</p>\n<p><br></p>\n<h3 id=\"bootstrapjs\"><a href=\"https://github.com/Michieljoris/bootstrapjs\" target=\"_blank\" rel=\"external\">bootstrapjs</a></h3>\n<p>To keep the roster app modular I wrote my version of requirejs. Not AMD compatible, but same idea and functionality. See the repo for more info. I had ideas of having it concatenate all the files in the right order for production use. However browserify and the use of transpiled languages (clojure!) make it all this a bit obsolete. Let alone that javascript itself will have modules in es6 it seems. But it was fun to write, basically doing a depth first search to resolve the dependencies, with detection of cyclic dependencies.</p>\n<p><br><br>More on <a href=\"http://github.com/Michieljoris\" target=\"_blank\" rel=\"external\">github</a></p>\n","source":"projects/index.md","raw":"title: Projects\ndate: 2014-06-03 01:18:51\ncomments: false\n\n---\n\n\n\n<br/>\n###[bb-server](http://github.com/Michieljoris/bb-server)\n\nStarting out as cobbled together one page node server, it grew over the past year to a more featured server. Totally rewritten and refactored a couple of times, it now can function as a https server, and a socket server as well. Customized logging, caching in memory and disk, and on the fly transpiling, minifying and compressing of assets and more have turned it into a more production ready server. \n\nAt the same time it still starts up with a single word command, all the features are then disabled by default. A lot of features can still be enabled on that same command line, but for an easier and more complete configuration a config file can be used. No plugin system, since it is easier to just write it into the server than designing one, except for the transpilers, compressors etc, more can easily be added by using little api.\n\nMostly a learning experience for me, however I do use it for some of my sites. \n\n<br/>\n\n\n###[html-builder](https://github.com/Michieljoris/html-builder)\n\nA simple html build system using templates of sort. Using [flatiron plates](https://github.com/flatiron/plates) to fish out markers from the html soup and a javascript object to knit it all together again. But again, because I wrote it myself I can adapt it easily to whatever I need it to be, and you learn a lot while writing and adapting it. [dbeditor](https://github.com/Michieljoris/dbeditor)\n\nDbeditor allows you to connect to your dropbox, browse the contents and then edit text files using a markdown or wysiwyg editor.\n\n<br/>\n\n###[cachejs](https://github.com/Michieljoris/cachejs)\n\nImplementation of both LRU and ARC cache. Used in bb-server. It includes a heavily commented arc_cache.js file. The Adaptive Replacement Cache algorithm is supposed be efficient. I think I understand how it works, but whether I could have written it I don't know. It seems clever. \n<br/>\n\n###[quilt](https://github.com/Michieljoris/quilt)\n\nA word play on futon, the database manager that comes with CouchDB. I thought it was not as useful as it could be, so I wrote my own version. It allows you to edit the various design docs in the manager. It also simplifies editing and enabling replications, and a number of other enhancements. As usual I start out with big plans for an app, and implement the bulk of it, but there definitly still things that could be worked on and expanded on. \n\nThe other half of this app is a wizard to make it very easy for people to install and cors enable a CouchDB database for use with an other web app, roster. It then initializes the database depending on who they are and what their preferences are, setting up the right replications and permissions.\n\n<br/>\n\n###[validate_doc_update](https://github.com/Michieljoris/validate_doc_update)\n\nUsed for the roster web app to easily manage read -and- write permissions. I didn't want to write a different validate_doc_update document for every use case, so I made a generic one that can be controlled via a little dsl, embedded in the read permissions. See the github repo for more info. \n<br/>\n\n###[roster](https://github.com/Michieljoris/roster)\n\nI've been doing shift work to make ends meet for a number of years. I got tired of filling in time sheets, I never seemed to do that without at least one mistake or correction, so I made a little Excel worksheet for my own use. This time sheet was picked up by other staff and management and it had to be adapted to other work places. In the end Excel worksheet just got to complicated so I made this web app. \n\nIt is built using [Smartclient](https://smartclient.com/) for the interface and is served by CouchDB where the data is stored as a couchapp. At the moment it sits on a Linode server. Users are authenticated and can be assigned roles. The user database is synced between databases. I wrote a long spiel about the security aspects of the app [here](http://roster_help.axion5.net/).\n\nThe app can be run offline because it uses application cache. The app itself can be synced to a local database, and so can the data the app runs against. The app can also be run against an in-browser database using an implemention of a browser version of CouchDB: [pouchdb](http://pouchdb.com/). \n\nI tried to keep the UI as simple as possible, no menus, only 5 little buttons. The user can build up their own UI to some extent by dragging and dropping, this gets persisted accross sessions, and even accross databases. \n\nThe thing is designed really to be backend agnostic and extendable by plugin views, even plugin types. But at the moment it works against CouchDB and has only the following types (and their editors): shift, location, person, settings, user and the following views of data: table, calendar and time sheet. The design of the app is such that it is quite easy to add more views of the data, like a graph for instance. \n\nFrom the repo's README:\n\n{% blockquote %}\nTo help people set up a CouchDB instance I wrote quilt, it configures and sets up all the necessary replications for them. It is also a generic CouchDB manager a la futon.\n\nThe idea is to have a decentralized but hierarchical group of CouchDB instances against which the app can work, see my blurb on security.\n\nIn the end staff can view their upcoming shifts online, bosses can manipulate them, and management can have an overview and collate all the data easily.\n\nSmartClient is a bit cumbersome and it would be nice to rewrite the app using no\nframeworks. Especially the calendar gets a bit sluggish.\n{% endblockquote %}\n\nThe app itself is used by a few people at the organisation I wrote it for. I had\na meeting/presentation with management, but things can move a bit slow at these\norganizations. Or maybe I am just not the best salesman..\n\n<br/>\n\n###[bootstrapjs](https://github.com/Michieljoris/bootstrapjs)\n\nTo keep the roster app modular I wrote my version of requirejs. Not AMD compatible, but same idea and functionality. See the repo for more info. I had ideas of having it concatenate all the files in the right order for production use. However browserify and the use of transpiled languages (clojure!) make it all this a bit obsolete. Let alone that javascript itself will have modules in es6 it seems. But it was fun to write, basically doing a depth first search to resolve the dependencies, with detection of cyclic dependencies.\n\n<br/>\nMore on [github](http://github.com/Michieljoris)\n\n","updated":1406165293000,"path":"projects/index.html","excerpt":"","_id":"4qj9ljp8ee6ipwks","layout":"page"}],"Post":[{"title":"My webstack","date":1396454844000,"tags":["4a90mgraixoubjqi"],"content":"<p>Partly to learn and partly because I like to be in control I wrote my own webserver. It started out as a very simple file server but now implements quite a few features. It also now cooperates to some degree with another project of mine, a simple templating engine.</p>\n<p>I was able to implement a number of ideas across these two projects. One idea is that instead of having a build tool such as grunt the server can fullfil this role on the fly. Since you don’t really need to minify, transpile, gzip till a client browser requests the file, I thought it should be the server’s job, not some arbitrary build tool. </p>\n<p>Another idea is that browsers implement already the best mechanism for storing resulting files, namely caches. Since we can’t always rely on a browser to cache resources, I added a <a href=\"http://github.com/michieljoris/cachejs\" target=\"_blank\" rel=\"external\">LRU memory</a> and disk cache to the server as well.</p>\n<a id=\"more\"></a>\n\n<p>A module called <a href=\"http://github.com/Michieljoris/recaster\" target=\"_blank\" rel=\"external\">recaster</a> does the actual transforming. Recast uses multiple passes and is pluggable. At the moment amongst others sweetjs, typescript, coffeescript, minifiers, gzip are implemented. In practice this means you can include for instance a script tag for a some_script.coffee in your html file and actually have a gzipped, minified and transpiled javascript file sent to your browser. Since the file is then cached by the browser and the server this file will not have to be recast till you change it. Since the server is able to send out files with a cachebusting stamp (never expires) ,if enabled, the server won’t even be asked for the file anymore. In develop and in production mode all the server is ever sending out is some html file and any changed files.</p>\n<p>Something else I tried to avoid as much as possible is a distinction to the developer between production and develop mode. With an approprate environment variable set, the server and other tools should just do the right thing in different environments. So the server will just not transform or cache files when in a develop environment. No need to rebuild the project for production mode.</p>\n<p>I like a server to be light and nimble, so I started out with a simple command line script, configured with command line options, I tried to stick with this idea as much as possible, so the server still starts up instantly on the commandline and gives some feedback on what it is doing.</p>\n<p>I like a clear distinction between setting options and modifying or writing code. So the server for instance can be configured on the command line, or by passing it a configuration file. The server reads these options and adjusts its behaviour. You don’t string modules together, or connect functions in some dsl like source file. Instead I hard code functionality into the server and configure it from the outside. This way the code as a whole stays transparent and nimble and light without the overhead of accomodating clever pluggable constructs.</p>\n<p>Because the recasting principle is so simple and effective I’ve been able to implement and add two handy little ideas. One idea is to inject a reload script into served html (just another recast). The reload script I wrote connects to a websocket. The server is able to start up a websocket server and can be given handlers for particular messages. So I have my html templating engine send a message to the server when it finishes building and the server then sends out a reload message to all the connected browsers. Very effective. I found all other mechanisms unreliable, such as inotify, livereload, browser extensions etc.</p>\n<p>The other idea that recaster let me implement rather easily (in combination with html-bulder) is using node modules in the browser. Recast just wraps javascript files with the iife on the fly. This is a full implementation, comparable to browserify, however unlike browserify files of course don’t get bundled (you can concatenate them beforehand though if you like though). Which means you don’t need source maps to debug them in the browser. Not much else to say about it, the source code is barely 50 lines, other than that you can still write modules in other languages than javascript. In other words any transform that works on normal javascript files still works on node modules. Because I needed it the path module is included by default. The module is called <a href=\"http://github.com/michieljoris/denodify\" target=\"_blank\" rel=\"external\">denodify</a></p>\n<p>Some of the functionality above needs the cooperation of html-builder. For instance html-builder is able to cachify resources, that is, it is able to stamp script and link tags. It also can include a script with a list of resources, cache stamps and a cachify function for any client side scripts to use when dynamically requesting resources. Html-builder is able to concatenate js and css files and replace multiple script tags with a few. Originally I wrote html-builder because I really didn’t want to write script tags into a html file. I really didn’t want to write any html at all, other than structural html. Now structure exists at multiple levels, from <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code> to the divs or uls of some page or component. Html-builder just fits all these partials and parts together to produce html files. Because the script is pretty straight forward I am able to add for instance a slideshow easily by adding code that writes the html for me to the script and put any customization in html-builder’s configuration file, which I called recipe.js.</p>\n<p>The server can be configured to send one specific file unless it’s asked for a static resource. A single page (javascript) application can then decide what to show the user in response to any user interaction, such as click on a link for instance. Google might not always use javascript to look at the served page. Google promises to also ask for the same page with an escaped fragment query. In this case a phantomjs created version of the page will be sent, after being cached of course.</p>\n<p>Web applications often need authentication, so I added the server implementation of Persona to the server, with a sample client implementation using Angularjs. For this to work sessions need to be enabled. </p>\n<p>I haven’t had a need for real server routing yet, so the configuration for that is really simple. Just add a handler for a POST or GET request for a specific path. With not so much effort you could write a generic handler that dispatches requests depending on the path in the request’s url. </p>\n<p><a href=\"http://github.com/michieljoris/bb-server\" target=\"_blank\" rel=\"external\">Bb-server</a> and <a href=\"http://github.com/michieljoris/html-builder\" target=\"_blank\" rel=\"external\">html-builder</a> are really good at putting together and serving html, js and css to a browser. However they don’t build a front-end. The two main problems there it seems to me are data binding and data sharing. You don’t want to mess with event handlers and html elements and any other dom specific minutiae. You want a representation of your ui in your code and the the ui will just have to do its thing which is showing the data in an appropriate form and shoving data back to the code when the user interfaces. At the same time the code needs to be as modular as possible, but still be responsive to these data changes. I think all the big frameworks in vogue are trying to solve these two problems. Frameworks are by necessitiy opiniated though. They like to enforce a preferred way of doing things. I think though that code needs to be free from opinions and guide lines and style guides and be the master of proceedings. It needs to be its own framework. Code needs to use tools, tools shouldn’t try to absorb code. So I don’t want to use these big frameworks (angular, knockout, ember etc). Maybe one tool should focus on the data binding and components (Reactjs, ractive.js, polymer) and another on message passing (arbiter.js, postaljs, pub/sub). With code being modular and a decent interface to a backend server/database you should be able to write any app you want, implementing bits of frameworks and libraries as you need them. </p>\n","source":"_posts/my-webstack.md","raw":"title: My webstack\ndate: 2014-04-03 02:07:24\ntags: server\n---\n\nPartly to learn and partly because I like to be in control I wrote my own webserver. It started out as a very simple file server but now implements quite a few features. It also now cooperates to some degree with another project of mine, a simple templating engine.\n\nI was able to implement a number of ideas across these two projects. One idea is that instead of having a build tool such as grunt the server can fullfil this role on the fly. Since you don't really need to minify, transpile, gzip till a client browser requests the file, I thought it should be the server's job, not some arbitrary build tool. \n\nAnother idea is that browsers implement already the best mechanism for storing resulting files, namely caches. Since we can't always rely on a browser to cache resources, I added a [LRU memory](http://github.com/michieljoris/cachejs) and disk cache to the server as well.\n\n<!-- more -->\n\nA module called [recaster](http://github.com/Michieljoris/recaster) does the actual transforming. Recast uses multiple passes and is pluggable. At the moment amongst others sweetjs, typescript, coffeescript, minifiers, gzip are implemented. In practice this means you can include for instance a script tag for a some_script.coffee in your html file and actually have a gzipped, minified and transpiled javascript file sent to your browser. Since the file is then cached by the browser and the server this file will not have to be recast till you change it. Since the server is able to send out files with a cachebusting stamp (never expires) ,if enabled, the server won't even be asked for the file anymore. In develop and in production mode all the server is ever sending out is some html file and any changed files.\n\nSomething else I tried to avoid as much as possible is a distinction to the developer between production and develop mode. With an approprate environment variable set, the server and other tools should just do the right thing in different environments. So the server will just not transform or cache files when in a develop environment. No need to rebuild the project for production mode.\n\nI like a server to be light and nimble, so I started out with a simple command line script, configured with command line options, I tried to stick with this idea as much as possible, so the server still starts up instantly on the commandline and gives some feedback on what it is doing.\n\nI like a clear distinction between setting options and modifying or writing code. So the server for instance can be configured on the command line, or by passing it a configuration file. The server reads these options and adjusts its behaviour. You don't string modules together, or connect functions in some dsl like source file. Instead I hard code functionality into the server and configure it from the outside. This way the code as a whole stays transparent and nimble and light without the overhead of accomodating clever pluggable constructs.\n\nBecause the recasting principle is so simple and effective I've been able to implement and add two handy little ideas. One idea is to inject a reload script into served html (just another recast). The reload script I wrote connects to a websocket. The server is able to start up a websocket server and can be given handlers for particular messages. So I have my html templating engine send a message to the server when it finishes building and the server then sends out a reload message to all the connected browsers. Very effective. I found all other mechanisms unreliable, such as inotify, livereload, browser extensions etc.\n\nThe other idea that recaster let me implement rather easily (in combination with html-bulder) is using node modules in the browser. Recast just wraps javascript files with the iife on the fly. This is a full implementation, comparable to browserify, however unlike browserify files of course don't get bundled (you can concatenate them beforehand though if you like though). Which means you don't need source maps to debug them in the browser. Not much else to say about it, the source code is barely 50 lines, other than that you can still write modules in other languages than javascript. In other words any transform that works on normal javascript files still works on node modules. Because I needed it the path module is included by default. The module is called [denodify](http://github.com/michieljoris/denodify)\n\nSome of the functionality above needs the cooperation of html-builder. For instance html-builder is able to cachify resources, that is, it is able to stamp script and link tags. It also can include a script with a list of resources, cache stamps and a cachify function for any client side scripts to use when dynamically requesting resources. Html-builder is able to concatenate js and css files and replace multiple script tags with a few. Originally I wrote html-builder because I really didn't want to write script tags into a html file. I really didn't want to write any html at all, other than structural html. Now structure exists at multiple levels, from `<html>`, `<head>`, `<body>` to the divs or uls of some page or component. Html-builder just fits all these partials and parts together to produce html files. Because the script is pretty straight forward I am able to add for instance a slideshow easily by adding code that writes the html for me to the script and put any customization in html-builder's configuration file, which I called recipe.js.\n\nThe server can be configured to send one specific file unless it's asked for a static resource. A single page (javascript) application can then decide what to show the user in response to any user interaction, such as click on a link for instance. Google might not always use javascript to look at the served page. Google promises to also ask for the same page with an escaped fragment query. In this case a phantomjs created version of the page will be sent, after being cached of course.\n\nWeb applications often need authentication, so I added the server implementation of Persona to the server, with a sample client implementation using Angularjs. For this to work sessions need to be enabled. \n\nI haven't had a need for real server routing yet, so the configuration for that is really simple. Just add a handler for a POST or GET request for a specific path. With not so much effort you could write a generic handler that dispatches requests depending on the path in the request's url. \n\n[Bb-server](http://github.com/michieljoris/bb-server) and [html-builder](http://github.com/michieljoris/html-builder) are really good at putting together and serving html, js and css to a browser. However they don't build a front-end. The two main problems there it seems to me are data binding and data sharing. You don't want to mess with event handlers and html elements and any other dom specific minutiae. You want a representation of your ui in your code and the the ui will just have to do its thing which is showing the data in an appropriate form and shoving data back to the code when the user interfaces. At the same time the code needs to be as modular as possible, but still be responsive to these data changes. I think all the big frameworks in vogue are trying to solve these two problems. Frameworks are by necessitiy opiniated though. They like to enforce a preferred way of doing things. I think though that code needs to be free from opinions and guide lines and style guides and be the master of proceedings. It needs to be its own framework. Code needs to use tools, tools shouldn't try to absorb code. So I don't want to use these big frameworks (angular, knockout, ember etc). Maybe one tool should focus on the data binding and components (Reactjs, ractive.js, polymer) and another on message passing (arbiter.js, postaljs, pub/sub). With code being modular and a decent interface to a backend server/database you should be able to write any app you want, implementing bits of frameworks and libraries as you need them. \n\n","slug":"my-webstack","updated":1406165293000,"excerpt":"<p>Partly to learn and partly because I like to be in control I wrote my own webserver. It started out as a very simple file server but now implements quite a few features. It also now cooperates to some degree with another project of mine, a simple templating engine.</p>\n<p>I was able to implement a number of ideas across these two projects. One idea is that instead of having a build tool such as grunt the server can fullfil this role on the fly. Since you don’t really need to minify, transpile, gzip till a client browser requests the file, I thought it should be the server’s job, not some arbitrary build tool. </p>\n<p>Another idea is that browsers implement already the best mechanism for storing resulting files, namely caches. Since we can’t always rely on a browser to cache resources, I added a <a href=\"http://github.com/michieljoris/cachejs\" target=\"_blank\" rel=\"external\">LRU memory</a> and disk cache to the server as well.</p>\n","_id":"tljga2sw9uihlw7u","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Meteor, docs and attached files","date":1401712408000,"comments":true,"tags":["4a90mgraixoubjqi","eghfsxhqa5gq5zy4","rff3lr7tiqsu94dp"],"content":"<p>You can store files directly in MongoDB documents, however there is a limit of 16MB and the Meteor DDP protocol might not be up to the task (reference..)</p>\n<p>There are two atmosphere packages that attempt to fill the gap:</p>\n<ul>\n<li><a href=\"https://github.com/CollectionFS/Meteor-CollectionFS\" target=\"_blank\" rel=\"external\">CollectionFS</a> </li>\n<li><a href=\"https://github.com/vsivsi/meteor-file-collection/\" target=\"_blank\" rel=\"external\">fileCollection</a></li>\n</ul>\n<p>Both are extensively documentend, with the latter one being the lighter one.</p>\n<p>They either use the MongoDB GridFS or store files externally on S3 or the server’s file system. They both tie in with the MongoDB style of organising data, extending functionality of collections, by having special ‘file’ collections.</p>\n<p>These ‘file’ documents can then be referenced from other documents. With these packages come API’s and systems for security, manipulation, filtering, UI helpers etc.</p>\n<p>My eyes drooped and my mind wandered every time I tried to read through the documentation for these packages. It seemed a bit overdone, at least for my purposes.</p>\n<a id=\"more\"></a>\n\n<p>I have used CouchDB somewhat, and files are called attachments in that corner of the database world. The API is simple, just ‘attach’ them, and CouchDB takes care of storing them. Access rights are tied to the document they are attached to.</p>\n<p>I tried to implement something similar for Meteor.</p>\n<p>Instead of storing the files in MongoDB, they are stored on and read from the server’s hard disk through a separate static file server. Files are attached by path and name to a document, as an array of file objects. Each object can contain as much meta data as you like, but at least the path and name.</p>\n<p>To access a file from the file server an access key needs to accompany the request for the file. This access key is generated (and encrypted) server side by Meteor when the document is published that has the reference to the file. The access key contains two references, one to the currently logged in user’s hashed log in token, and one to md5 hash of the contents of the file.</p>\n<p>Because transform (reference..) doesn’t work on the server side I am using added and friends to modify the relevant docs when published:</p>\n<figure class=\"highlight javascript\"><figcaption><span>Draft of attaching access keys to files in Meteor.publish</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">\"products\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(options)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> sub = <span class=\"keyword\">this</span>; </div><div class=\"line\">    <span class=\"keyword\">var</span> userId = <span class=\"keyword\">this</span>.userId;</div><div class=\"line\">    <span class=\"keyword\">var</span> user = Meteor.users.findOne({_id: userId});</div><div class=\"line\">    <span class=\"keyword\">var</span> handle = Products.find({}).observeChanges({</div><div class=\"line\">        added: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(id, product)</span> </span>{</div><div class=\"line\">            <span class=\"keyword\">var</span> hashedToken = <span class=\"string\">''</span>;</div><div class=\"line\">            <span class=\"keyword\">try</span> {</div><div class=\"line\">                hashedToken = user.services.resume.loginTokens[<span class=\"number\">0</span>].hashedToken;</div><div class=\"line\">            } <span class=\"keyword\">catch</span>(e) { }</div><div class=\"line\">            <span class=\"keyword\">if</span> (user && hashedToken && product.files) {</div><div class=\"line\">                product.files = product.files.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(f)</span> </span>{</div><div class=\"line\">                    <span class=\"keyword\">var</span> loginToken = hashedToken;</div><div class=\"line\">                    <span class=\"keyword\">var</span> encrypted = encrypt(<span class=\"built_in\">JSON</span>.stringify({l:loginToken,f:f.md5}), pwd);</div><div class=\"line\">                    <span class=\"keyword\">return</span> _.extend(f, { key  : encrypted.encrypted });</div><div class=\"line\">                });</div><div class=\"line\">            }</div><div class=\"line\">            sub.added(<span class=\"string\">'products'</span>, id, product);</div><div class=\"line\">        },</div><div class=\"line\">        changed: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(id, fields)</span> </span>{</div><div class=\"line\">            sub.changed(<span class=\"string\">'products'</span>, id, fields);</div><div class=\"line\">        },</div><div class=\"line\">        removed: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(id)</span> </span>{</div><div class=\"line\">            <span class=\"comment\">// stop observing changes on the post's comments</span></div><div class=\"line\">            <span class=\"comment\">// commentHandles[id] && commentHandles[id].stop();</span></div><div class=\"line\">            <span class=\"comment\">// delete the post</span></div><div class=\"line\">            sub.removed(<span class=\"string\">'products'</span>, id);</div><div class=\"line\">        }</div><div class=\"line\">    });</div><div class=\"line\">    sub.ready();</div><div class=\"line\">    sub.onStop(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{ handle.stop(); });</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>Because the access key gets added to the docs at publication time, and includes the currently logged in user’s login token (or hashed version then), every user and every session will get different access keys for the same files. Two different users will have two different access keys, and when a user logs out and in again, the access keys will different as well, since their login token has changed.</p>\n<p>You need to be logged in to create any access key at all, and you need access to the document before you get the access key for any attached document. And since the access keys are generated server side, and encrypted with a secret password, no user is able to generate any access key on their own, even when they know their own loginToken (they do) and they know the md5 (which they might) of the file they want.</p>\n<p>However the static file server does know the password (shared with meteor) to decrypt the access key to its components. With it they can check whether the login token is valid (by accessing Meteor’s MongoDB instance), in other words whether the user that received the access key with an document they were allowed to access is actually logged in. The file server can also check whether the file requested (in the path of the request) is actually the file that was attached to the document in the first place using the decrypted md5 in the access key:</p>\n<figure class=\"highlight javascript\"><figcaption><span>Draft of server side authorizing of request</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">if</span> (req.url.pathname.indexOf(<span class=\"string\">'/public'</span>) === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> VOW.kept(); </div><div class=\"line\">    <span class=\"keyword\">var</span> vow = VOW.make();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> query = req.url.search;</div><div class=\"line\">    <span class=\"keyword\">var</span> decrypted = decrypt(query.slice(<span class=\"number\">1</span>), pwd);</div><div class=\"line\">    <span class=\"keyword\">var</span> data;</div><div class=\"line\">    <span class=\"keyword\">if</span> (decrypted.error) </div><div class=\"line\">        vow.break({ forbidden: <span class=\"literal\">true</span>, srcPath: req.url.pathname });</div><div class=\"line\">    <span class=\"keyword\">else</span> {</div><div class=\"line\">        <span class=\"keyword\">try</span> {</div><div class=\"line\">            data = <span class=\"built_in\">JSON</span>.parse(decrypted.decrypted);</div><div class=\"line\">        } <span class=\"keyword\">catch</span>(e) {</div><div class=\"line\">            vow.break({ forbidden: <span class=\"literal\">true</span>, srcPath: req.url.pathname });</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">var</span> hashedToken = data.l;</div><div class=\"line\">        retrieveUser(hashedToken).when(</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(user)</span> </span>{</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"file retrieval of \"</span> + req.url.pathname  + <span class=\"string\">' by '</span> , user.emails);</div><div class=\"line\">                vow.keep();</div><div class=\"line\">                </div><div class=\"line\">            },</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err)</span> </span>{</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">                vow.break({ forbidden: <span class=\"literal\">true</span>, srcPath: req.url.pathname });</div><div class=\"line\">            }</div><div class=\"line\">        );</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> vow.promise;</div><div class=\"line\">  </div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>Requests come in the form of:</p>\n<p><code>http://files.server.com/path/to/somefile?KJSDFS93450FJDKSFJKDJFLSFS8908</code> </p>\n<p>With the part after the question mark being the access key.</p>\n<p>When a user uploads a file, the md5 of the file can be calculated client side (by a library such as <a href=\"https://github.com/satazor/SparkMD5\" target=\"_blank\" rel=\"external\">SparkMD5</a> for instance), and saved with the document. You could then forbid updating the md5 of any attachments server side perhaps, or attach them server side when the documents gets saved.</p>\n<p>Users could reuse an access key for a different path on the file server, in the same session (with the same login token) only if the file on that different path has the same md5 checksum, in other words, it’s the same file.</p>\n<p>Additional access rights to documents and thus to files can be granted to users within the same session, however when you take away access rights the documents will be ‘denied’, but the files will still be accessible. However when the logged in user logs out and then in again (new loginToken) the files will be disallowed as well. You could perhaps force to log everybody out <code>Meteor.logoutOtherClients</code>, or somehow issue everybody with new login tokens. </p>\n<p>Another caveat is that once a user copies or retrieves the url to a file, this url will work in any browser, on any computer as long as the user is logged in. It might be possible to work around this by setting a cookie (to the loginToken for example) in the tab and browser where the user is logged into the app. The file server can check whether the loginToken in the decrypted access key is the same as the cookie received with the request.</p>\n<p>The system is rather simple, and only needs a slight modification to an otherwise open static file server (I used my own <a href=\"http://github.com/Michieljoris/bb-server\" target=\"_blank\" rel=\"external\">bb-server</a>), and a small adaption of publish functions for documents that can refer to files. You also have to write the user interface part of listing, uploading, deleting, retrieving of file attachments.</p>\n<p>For my own and future reference here is the code for uploading files:</p>\n<figure class=\"highlight html\"><figcaption><span>Custom styleable upload link</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"file\"</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"fileElem\"</span> <span class=\"attribute\">multiple</span> <span class=\"attribute\">accept</span>=<span class=\"value\">\"*\"</span> <span class=\"attribute\">style</span>=<span class=\"value\">\"display:none\"</span> <span class=\"attribute\">onchange</span>=<span class=\"value\">\"handleFiles(this.files)\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"#\"</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"fileSelect\"</span>&gt;</span>Select files<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight javascript\"><figcaption><span>Use HTML5 filereader to read and ajax post the file</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveFile</span><span class=\"params\">(fileName, data)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fileName) {</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'no filename, so not saving'</span>, data);</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Saving file '</span> + fileName);</div><div class=\"line\">    HTTP.call(<span class=\"string\">'POST'</span>, FILEHOST + <span class=\"string\">'/?path='</span> + fileName, {</div><div class=\"line\">        content: data</div><div class=\"line\">    }, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(error, result)</span> </span>{</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'error: '</span>, error, <span class=\"string\">'\\nresult: '</span>, result);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (error) {</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Failed to save on the server '</span>, data.error);</div><div class=\"line\">            alert(<span class=\"string\">'Warning: this file did not save to the server!!'</span>);</div><div class=\"line\">\t}</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Success. Data saved to:\"</span>, fileName);</div><div class=\"line\">    });</div><div class=\"line\">} </div><div class=\"line\"></div><div class=\"line\">handleFiles = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleFiles</span><span class=\"params\">(files)</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// console.log(files);</span></div><div class=\"line\">    <span class=\"keyword\">var</span> fileList = files; <span class=\"comment\">/* now you can work with the file list */</span></div><div class=\"line\">    <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span> </span>{</div><div class=\"line\">        <span class=\"comment\">//post to bb-server </span></div><div class=\"line\">\t<span class=\"comment\">//TODO calculate MD5 of every file</span></div><div class=\"line\">\t<span class=\"comment\">//TODO add multiple file upload support</span></div><div class=\"line\">        saveFile(fileList[<span class=\"number\">0</span>].name, reader.result);</div><div class=\"line\">    };</div><div class=\"line\">    <span class=\"comment\">// console.log(fileList[0]);</span></div><div class=\"line\">    reader.readAsText(fileList[<span class=\"number\">0</span>]);</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n","source":"_posts/Meteor,-docs-and-attached-files.md","raw":"title: 'Meteor, docs and attached files'\ndate: 2014-06-02 22:33:28\ncomments: true\ntags: \n- server\n- database\n- Meteor\n---\n\nYou can store files directly in MongoDB documents, however there is a limit of 16MB and the Meteor DDP protocol might not be up to the task (reference..)\n\nThere are two atmosphere packages that attempt to fill the gap:\n\n* [CollectionFS](https://github.com/CollectionFS/Meteor-CollectionFS) \n* [fileCollection](https://github.com/vsivsi/meteor-file-collection/)\n\nBoth are extensively documentend, with the latter one being the lighter one.\n\nThey either use the MongoDB GridFS or store files externally on S3 or the server's file system. They both tie in with the MongoDB style of organising data, extending functionality of collections, by having special 'file' collections.\n\nThese 'file' documents can then be referenced from other documents. With these packages come API's and systems for security, manipulation, filtering, UI helpers etc.\n\nMy eyes drooped and my mind wandered every time I tried to read through the documentation for these packages. It seemed a bit overdone, at least for my purposes.\n\n<!-- more -->\n\nI have used CouchDB somewhat, and files are called attachments in that corner of the database world. The API is simple, just 'attach' them, and CouchDB takes care of storing them. Access rights are tied to the document they are attached to.\n\nI tried to implement something similar for Meteor.\n\nInstead of storing the files in MongoDB, they are stored on and read from the server's hard disk through a separate static file server. Files are attached by path and name to a document, as an array of file objects. Each object can contain as much meta data as you like, but at least the path and name.\n\nTo access a file from the file server an access key needs to accompany the request for the file. This access key is generated (and encrypted) server side by Meteor when the document is published that has the reference to the file. The access key contains two references, one to the currently logged in user's hashed log in token, and one to md5 hash of the contents of the file.\n\nBecause transform (reference..) doesn't work on the server side I am using added and friends to modify the relevant docs when published:\n\n```` javascript  Draft of attaching access keys to files in Meteor.publish\n\nMeteor.publish(\"products\", function (options) {\n    var sub = this; \n    var userId = this.userId;\n    var user = Meteor.users.findOne({_id: userId});\n    var handle = Products.find({}).observeChanges({\n        added: function(id, product) {\n            var hashedToken = '';\n            try {\n                hashedToken = user.services.resume.loginTokens[0].hashedToken;\n            } catch(e) { }\n            if (user && hashedToken && product.files) {\n                product.files = product.files.map(function(f) {\n                    var loginToken = hashedToken;\n                    var encrypted = encrypt(JSON.stringify({l:loginToken,f:f.md5}), pwd);\n                    return _.extend(f, { key  : encrypted.encrypted });\n                });\n            }\n            sub.added('products', id, product);\n        },\n        changed: function(id, fields) {\n            sub.changed('products', id, fields);\n        },\n        removed: function(id) {\n            // stop observing changes on the post's comments\n            // commentHandles[id] && commentHandles[id].stop();\n            // delete the post\n            sub.removed('products', id);\n        }\n    });\n    sub.ready();\n    sub.onStop(function() { handle.stop(); });\n});\n\n````\n\nBecause the access key gets added to the docs at publication time, and includes the currently logged in user's login token (or hashed version then), every user and every session will get different access keys for the same files. Two different users will have two different access keys, and when a user logs out and in again, the access keys will different as well, since their login token has changed.\n\nYou need to be logged in to create any access key at all, and you need access to the document before you get the access key for any attached document. And since the access keys are generated server side, and encrypted with a secret password, no user is able to generate any access key on their own, even when they know their own loginToken (they do) and they know the md5 (which they might) of the file they want.\n\nHowever the static file server does know the password (shared with meteor) to decrypt the access key to its components. With it they can check whether the login token is valid (by accessing Meteor's MongoDB instance), in other words whether the user that received the access key with an document they were allowed to access is actually logged in. The file server can also check whether the file requested (in the path of the request) is actually the file that was attached to the document in the first place using the decrypted md5 in the access key:\n\n```` javascript Draft of server side authorizing of request\n\nmodule.exports = function(req) {\n    if (req.url.pathname.indexOf('/public') === 0) return VOW.kept(); \n    var vow = VOW.make();\n    \n    var query = req.url.search;\n    var decrypted = decrypt(query.slice(1), pwd);\n    var data;\n    if (decrypted.error) \n        vow.break({ forbidden: true, srcPath: req.url.pathname });\n    else {\n        try {\n            data = JSON.parse(decrypted.decrypted);\n        } catch(e) {\n            vow.break({ forbidden: true, srcPath: req.url.pathname });\n        }\n        var hashedToken = data.l;\n        retrieveUser(hashedToken).when(\n            function(user) {\n                console.log(\"file retrieval of \" + req.url.pathname  + ' by ' , user.emails);\n                vow.keep();\n                \n            },\n            function(err) {\n                console.log(err);\n                vow.break({ forbidden: true, srcPath: req.url.pathname });\n            }\n        );\n    }\n    return vow.promise;\n  \n};\n````\nRequests come in the form of:\n\n`http://files.server.com/path/to/somefile?KJSDFS93450FJDKSFJKDJFLSFS8908` \n\nWith the part after the question mark being the access key.\n\nWhen a user uploads a file, the md5 of the file can be calculated client side (by a library such as [SparkMD5](https://github.com/satazor/SparkMD5) for instance), and saved with the document. You could then forbid updating the md5 of any attachments server side perhaps, or attach them server side when the documents gets saved.\n\nUsers could reuse an access key for a different path on the file server, in the same session (with the same login token) only if the file on that different path has the same md5 checksum, in other words, it's the same file.\n\nAdditional access rights to documents and thus to files can be granted to users within the same session, however when you take away access rights the documents will be 'denied', but the files will still be accessible. However when the logged in user logs out and then in again (new loginToken) the files will be disallowed as well. You could perhaps force to log everybody out `Meteor.logoutOtherClients`, or somehow issue everybody with new login tokens. \n\nAnother caveat is that once a user copies or retrieves the url to a file, this url will work in any browser, on any computer as long as the user is logged in. It might be possible to work around this by setting a cookie (to the loginToken for example) in the tab and browser where the user is logged into the app. The file server can check whether the loginToken in the decrypted access key is the same as the cookie received with the request.\n\nThe system is rather simple, and only needs a slight modification to an otherwise open static file server (I used my own [bb-server](http://github.com/Michieljoris/bb-server)), and a small adaption of publish functions for documents that can refer to files. You also have to write the user interface part of listing, uploading, deleting, retrieving of file attachments.\n\nFor my own and future reference here is the code for uploading files:\n```` html Custom styleable upload link\n  <input type=\"file\" id=\"fileElem\" multiple accept=\"*\" style=\"display:none\" onchange=\"handleFiles(this.files)\">\n  <a href=\"#\" id=\"fileSelect\">Select files</a>\n````  \n\n```` javascript Use HTML5 filereader to read and ajax post the file\nfunction saveFile(fileName, data) {\n    if (!fileName) {\n        console.log('no filename, so not saving', data);\n    }\n    console.log('Saving file ' + fileName);\n    HTTP.call('POST', FILEHOST + '/?path=' + fileName, {\n        content: data\n    }, function(error, result) {\n        console.log('error: ', error, '\\nresult: ', result);\n\tif (error) {\n            console.log('Failed to save on the server ', data.error);\n            alert('Warning: this file did not save to the server!!');\n\t}\n\telse console.log(\"Success. Data saved to:\", fileName);\n    });\n} \n\nhandleFiles = function handleFiles(files) {\n    // console.log(files);\n    var fileList = files; /* now you can work with the file list */\n    var reader = new FileReader();\n    reader.onload = function(data) {\n        //post to bb-server \n\t//TODO calculate MD5 of every file\n\t//TODO add multiple file upload support\n        saveFile(fileList[0].name, reader.result);\n    };\n    // console.log(fileList[0]);\n    reader.readAsText(fileList[0]);\n};\n````\n","slug":"Meteor,-docs-and-attached-files","updated":1406165293000,"excerpt":"<p>You can store files directly in MongoDB documents, however there is a limit of 16MB and the Meteor DDP protocol might not be up to the task (reference..)</p>\n<p>There are two atmosphere packages that attempt to fill the gap:</p>\n<ul>\n<li><a href=\"https://github.com/CollectionFS/Meteor-CollectionFS\" target=\"_blank\" rel=\"external\">CollectionFS</a> </li>\n<li><a href=\"https://github.com/vsivsi/meteor-file-collection/\" target=\"_blank\" rel=\"external\">fileCollection</a></li>\n</ul>\n<p>Both are extensively documentend, with the latter one being the lighter one.</p>\n<p>They either use the MongoDB GridFS or store files externally on S3 or the server’s file system. They both tie in with the MongoDB style of organising data, extending functionality of collections, by having special ‘file’ collections.</p>\n<p>These ‘file’ documents can then be referenced from other documents. With these packages come API’s and systems for security, manipulation, filtering, UI helpers etc.</p>\n<p>My eyes drooped and my mind wandered every time I tried to read through the documentation for these packages. It seemed a bit overdone, at least for my purposes.</p>\n","_id":"2qr3jc78qup5lips","categories":[],"layout":"post","photos":[],"link":""},{"title":"About this site","date":1391620184000,"tags":[],"content":"<p>This site uses <a href=\"http://zespia.tw/hexo/\" target=\"_blank\" rel=\"external\">Hexo</a> as its blogging engine. I intended to use <a href=\"http://octopress.org\" target=\"_blank\" rel=\"external\">Octopress</a> at first but I ran into grief with syntax highlighting for code while testing. Pygments the highlighting library used seems to be unable to parse the language argument in the code block. I tried to sort it out but since I don’t know too much about Ruby and I wanted this site up within the day I switched to Hexo. It is very similar to Octopress but uses nodejs and connect with ejs for its templates instead of rails and erb. At least I should be able to fix things if they don’t work now, however it has been pretty smooth so far. Posts are written in markdown.</p>\n<p>It might be fun to write about miscellaneous technicalities as I run into them, or I might not bother. It has certainly been useful to me to read the multitude of little articles people have been putting up on their blogs, but I don’t know if I should be adding to them. We will see…</p>\n","source":"_posts/about-this-site.md","raw":"title: About this site\ndate: 2014-02-06 03:09:44\ntags:\n---\n\nThis site uses [Hexo](http://zespia.tw/hexo/) as its blogging engine. I intended to use [Octopress](http://octopress.org) at first but I ran into grief with syntax highlighting for code while testing. Pygments the highlighting library used seems to be unable to parse the language argument in the code block. I tried to sort it out but since I don't know too much about Ruby and I wanted this site up within the day I switched to Hexo. It is very similar to Octopress but uses nodejs and connect with ejs for its templates instead of rails and erb. At least I should be able to fix things if they don't work now, however it has been pretty smooth so far. Posts are written in markdown.\n\nIt might be fun to write about miscellaneous technicalities as I run into them, or I might not bother. It has certainly been useful to me to read the multitude of little articles people have been putting up on their blogs, but I don't know if I should be adding to them. We will see...\n\n\n","slug":"about-this-site","updated":1406165293000,"excerpt":"","_id":"qeus5oxe6jgqs6rx","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"server","_id":"4a90mgraixoubjqi","posts":["tljga2sw9uihlw7u","2qr3jc78qup5lips"]},{"name":"database","_id":"eghfsxhqa5gq5zy4","posts":["2qr3jc78qup5lips"]},{"name":"Meteor","_id":"rff3lr7tiqsu94dp","posts":["2qr3jc78qup5lips"]}]}